{"version":3,"sources":["tags.js"],"names":["tagsInput","document","querySelector","tags","tagsDiv","tagsInputHidden","mostrarTags","textContent","forEach","tag","etiqueta","createElement","classList","add","ondblclick","eliminarTag","appendChild","actualizarInputHidden","e","target","remove","filter","value","toString","split","addEventListener","keyCode","trim","preventDefault"],"mappings":"CAGA,WAEA,MAAAA,EAAAC,SAAAC,cAAA,eAGA,GAAAF,EAAA,CAGA,IAAAG,EAAA,GAGA,MAAAC,EAAAH,SAAAC,cAAA,SAIAG,EAAAJ,SAAAC,cAAA,iBA8CA,SAAAI,IAEAF,EAAAG,YAAA,GAIAJ,EAAAK,QAAAC,IAEA,MAAAC,EAAAT,SAAAU,cAAA,MAEAD,EAAAE,UAAAC,IAAA,mBAEAH,EAAAH,YAAAE,EAEAC,EAAAI,WAAAC,EAEAX,EAAAY,YAAAN,KAIAO,IAIA,SAAAF,EAAAG,GAEAA,EAAAC,OAAAC,SAGAjB,EAAAA,EAAAkB,OAAAZ,GAAAA,IAAAS,EAAAC,OAAAZ,aAEAU,IAKA,SAAAA,IAEAZ,EAAAiB,MAAAnB,EAAAoB,WAhFA,KAAAlB,EAAAiB,QAGAnB,EAAAE,EAAAiB,MAAAE,MAAA,KAEAlB,KAIAN,EAAAyB,iBAAA,YAGA,SAAAP,GAGA,GAAA,KAAAA,EAAAQ,QAAA,CAIA,GAAA,KAAAR,EAAAC,OAAAG,MAAAK,QAAAT,EAAAC,OAAAG,MAAA,EACA,OAKAJ,EAAAU,iBAMAzB,EAAA,IAAAA,EAAAe,EAAAC,OAAAG,MAAAK,QAGA3B,EAAAsB,MAAA,GAGAhB,SAxDA","file":"bundle.js","sourcesContent":["//el código js irá dentro de una función IIFE (Inmediately Invoked Function Expresión), \r\n//esta función se autoejecuta inmediatamente despues de ser definida.\r\n//Se usa para evitar la contaminación del ámbito global y encapsular sus variables.\r\n(function() {\r\n    //selecciona el elemento con id #tags_input y la asigna a la var tagsInput\r\n    const tagsInput = document.querySelector('#tags_input');\r\n    \r\n    //si el elemento tagsInput existe, se ejecuta el código\r\n    if(tagsInput) {\r\n        \r\n        //arreglo almacena las etiquetas tecleadas en el input, cuando se teclee ,\r\n        let tags = [];\r\n\r\n        //selecciona elemento html con id #tags, donde se mostraran los tags\r\n        const tagsDiv = document.querySelector('#tags');\r\n\r\n        //selecciona elemento html del form, con el atributo name=\"tags\"\r\n        //es el input hidden (oculto) del formulario agregar ponentes\r\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n\r\n        //**Recuperar los tags del value del input hidden (oculto)\r\n        //si el atributo value de elemento tagsInputHidden, contiene info\r\n        if(tagsInputHidden.value !== '') {\r\n            //extrae los valores separados por ',' del string, \r\n            //los convierte en arreglo y los asigna a tags\r\n            tags = tagsInputHidden.value.split(',');\r\n            //llama metodo que muestra los tags en el formulario\r\n            mostrarTags()\r\n        }\r\n\r\n        //Escuchar cambios en el input, cuando se teclee algo, ejecuta función\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n        //función que recibe el evento escuchado en e\r\n        function guardarTag(e) {\r\n            //si el código de la tecla que dispara el evento e, es 44\r\n            //significa que la tecla es una coma ,\r\n            if(e.keyCode === 44) {\r\n\r\n                //validar si se teclean espacios en blanco, o no se ha tecleado nada,\r\n                //no seguir ejecutando el código\r\n                if(e.target.value.trim() === '' || e.target.value < 1) {\r\n                    return\r\n                }\r\n\r\n                //cuando se ha pulsado la coma, evita la acción por defecto del evento e\r\n                // que es escribir la coma, para que la coma , no se muestre en el input\r\n                e.preventDefault();\r\n\r\n                //como se ha pulsado la tecla coma ,\r\n                //se genera un nuevo arreglo que toma copia del arreglo tags ...tags,\r\n                //agrega el valor de lo que se haya tecleado en el input (e.target.value),\r\n                //eliminando los valores en blanco con .trim() y lo reasigna al arreglo tags\r\n                tags = [...tags, e.target.value.trim()];\r\n                \r\n                //limpia el contenido del input tagsInput, tras pulsar la coma ,\r\n                tagsInput.value = '';\r\n\r\n                //llama función mostra los tags\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        //Muestra cada tag en el formulario\r\n        function mostrarTags() {\r\n            //agrega al div un string vacio, para limpiar\r\n            tagsDiv.textContent = '';\r\n\r\n            //itera el arreglo tags con las etiquetas introducidas\r\n            //y por cada etiqueta en tag\r\n            tags.forEach( tag => {\r\n                //crea un elemento LI y lo asigna a etiqueta\r\n                const etiqueta = document.createElement('LI');\r\n                //agrega la clase formulario__tag al elemento LI\r\n                etiqueta.classList.add('formulario__tag');\r\n                //agrega el valor (string) de la etiqueta iterada, en tag, al LI etiqueta\r\n                etiqueta.textContent = tag;\r\n                //asigna evento dobleclick a la etiqueta, que ejecutará la función eliminarTag\r\n                etiqueta.ondblclick = eliminarTag\r\n                //inserta el LI etiqueta, como hijo del div con id #tags\r\n                tagsDiv.appendChild(etiqueta); \r\n            })\r\n\r\n            //llama la función que asigna, el tag mostrado, al input hidden (oculto)\r\n            actualizarInputHidden()\r\n        }\r\n\r\n        //elimina del DOM y del arreglo tags, el tag recibido como evento dobleclick en e,\r\n        function eliminarTag(e) {\r\n            //elimina del DOM, el elemento (tag) que origna el evento e, el e.target\r\n            e.target.remove()\r\n            //filtra y obtiene cada tag sobre el que no se haya aplicado el e.target,\r\n            //los no eliminados y los reasigna al arreglo tags\r\n            tags = tags.filter(tag => tag !== e.target.textContent)\r\n            //llama método que asigna los tags al value del input hidden, para la DB\r\n            actualizarInputHidden()\r\n        } \r\n\r\n        //función que asigna cada tag, al value de input hidden (oculto)\r\n        //para actualizarlos en la DB\r\n        function actualizarInputHidden() {\r\n            //asigna al value del input hidden, el arreglo tag convertido a string\r\n            tagsInputHidden.value = tags.toString();\r\n        }\r\n    }\r\n\r\n})()\r\n"]}